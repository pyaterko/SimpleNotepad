plugins {
    id 'com.android.application'
    id 'org.jetbrains.kotlin.android'
    id 'kotlin-kapt'
    id 'androidx.navigation.safeargs.kotlin'

}

boolean signConfigExists = project.hasProperty("SIGN_PROPS") && new File(project.property("SIGN_PROPS")).exists()
if (signConfigExists) {
    Properties props = new Properties()
    props.load(new FileInputStream(file(project.property("SIGN_PROPS"))))
}
android {
    compileSdkVersion Config.compile_sdk
    defaultConfig {
        applicationId Config.application_id
        minSdkVersion Config.min_sdk
        targetSdkVersion Config.target_sdk
        versionCode Releases.version_code
        versionName Releases.version_name
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    buildFeatures {
        viewBinding true
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    compileOptions {
        sourceCompatibility Config.java_version
        targetCompatibility Config.java_version
    }
    kotlinOptions {
        jvmTarget = '1.8'
    }
}

dependencies {

    implementation project(Modules.domain)
    implementation project(Modules.data)
    implementation project(Modules.viewmodel)
    implementation project(Modules.intro)
    implementation project(Modules.settings)

    implementation Design.appcompat
    implementation Design.material
    implementation Kotlin.core
    implementation Kotlin.stdlib
    implementation Kotlin.coroutines_android
    implementation Kotlin.coroutines_core
    implementation Fragment.fragmentktx
    implementation Fragment.navigation_fragment_ktx
    implementation Fragment.navigation_ui_ktx
    implementation Fragment.navigation_dinamic_fragment
    implementation Dagger.dagger
    kapt Dagger.dagger_compiler
    implementation Fab.fab
    implementation Glide.glide
    implementation Glide.glideIntegration
    kapt Glide.glide_compiler
    implementation Pref.pref
    implementation Adapter.adapter

}